source -> definitions .
//************************************************//
*definitions -> definition .
*definitions -> definitions ';' definition .
//
**definitions -> definition ';' definitions | definition .
//
definitions -> definition definitions2 .
definitions2 -> ';' definitions | e .
//************************************************//
definition -> type_definition
definition -> function_definition
definition -> variable_definition
//************************************************//
type_definition -> typ identifier ':' type .
//************************************************//
type -> identifier .
type -> logical .
type -> integer .
type -> string .
type -> arr '[' int_const ']' type .
//************************************************//
function_definition -> fun identifier '(' parameters ')' ':' type '=' expression .
//************************************************//
*parameters -> parameter .
*parameters -> parameters ',' parameter .
//
**parameters -> parameter ',' parameters | parameter .
//
parameters -> parameter parameters2 .
parameters2 -> ',' parameters | e .
//************************************************//
parameter -> identifier ':' type .
//************************************************//
*expression -> logical_ior_expression .
*expression -> logical_ior_expression '{' WHERE definitions '}' .
//
**expression -> logical_ior_expression '{' WHERE definitions '}' | logical_ior_expression .
//
expression -> logical_ior_expression expression2 .
expression2 -> '{' WHERE definitions '}' | e .
//************************************************//
*logical_ior_expression -> logical_ior_expression '|' logical_and_expression .
*logical_ior_expression -> logical_and_expression .
//
logical_ior_expression -> logical_and_expression logical_ior_expression2 .
logical_ior_expression2 -> '|' logical_ior_expression | e .
//************************************************//
*logical_and_expression -> logical_and_expression '&' compare_expression .
*logical_and_expression -> compare_expression .
//
logical_and_expression -> compare_expression logical_and_expression2 .
logical_and_expression2 -> '&' logical_and_expression | e .
//************************************************//
*compare_expression -> additive_expression '==' additive_expression .
*compare_expression -> additive_expression '!=' additive_expression .
*compare_expression -> additive_expression '<=' additive_expression .
*compare_expression -> additive_expression '>=' additive_expression .
*compare_expression -> additive_expression '<' additive_expression .
*compare_expression -> additive_expression '>' additive_expression .
*compare_expression -> additive_expression .
//
compare_expression -> additive_expression compare_expression2 .
compare_expression2 -> 
'==' additive_expression | 
'!=' additive_expression |
'<=' additive_expression |
'>=' additive_expression |
'<' additive_expression |
'>' additive_expression |
e .
//************************************************//
*additive_expression -> additive_expression '+' multiplicative_expression .
*additive_expression -> additive_expression '-' multiplicative_expression .
*additive_expression -> multiplicative_expression .
//
additive_expression -> multiplicative_expression additive_expression2 .
additive_expression2 -> '+' additive_expression | '-' additive_expression | e .
//************************************************//
multiplicative_expression -> multiplicative_expression '*' prefix_expression .
multiplicative_expression -> multiplicative_expression '/' prefix_expression .
multiplicative_expression -> multiplicative_expression '%' prefix_expression .
multiplicative_expression -> prefix_expression .
//
multiplicative_expression -> prefix_expression multiplicative_expression2 .
multiplicative_expression2 -> 
'*' multiplicative_expression | 
'/' multiplicative_expression | 
'%' multiplicative_expression | e .
//************************************************//
prefix_expression -> '+' prefix_expression .
prefix_expression -> '-' prefix_expression .
prefix_expression -> '!' prefix_expression .
prefix_expression -> postfix_expression .
//************************************************//
*postfix_expression -> postfix_expression '[' expression ']' .
*postfix_expression -> atom_expression .
//
postfix_expression -> atom_expression postfix_expression2 .
postfix_expression2 -> '[' expression ']' postfix_expression2 | e .
//************************************************//
atom_expression -> log_constant .
atom_expression -> int_constant .
atom_expression -> str_constant .
//**//
*atom_expression -> identifier .
*atom_expression -> identifier '(' expressions ')' .
//
atom_expression -> identifier atom_expression_Identifier .
atom_expression_Identifier -> '(' expressions ')' | e .
//**//
*atom_expression -> '{' expression '=' expression '}' .
*atom_expression -> '{' if expression then expression '}' .
*atom_expression -> '{' if expression then expression else expression '}' .
*atom_expression -> '{' while expression ':' expression '}' .
*atom_expression -> '{' for identifier '=' expression ',' expression ',' expression ':' expression '}' .
//
atom_expression -> '{' atom_expression_Rbracket .

atom_expression_Rbracket -> if expression then expression atom_expression_Rbracket_IF
| expression '=' expression '}'
| while expression ':' expression '}'
| for identifier '=' expression ',' expression ',' expression ':' expression '}' .

atom_expression_Rbracket_IF -> '}' | else  expression '}' .
//**//
atom_expression -> '(' expressions ')' .
//************************************************//
*expressions -> expression .
*expressions -> expressions ',' expression .
//
expressions -> expression expressions2 .
expressions2 -> ',' expressions | e .
//************************************************//
variable_definition -> var identifer ':' type .